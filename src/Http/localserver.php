<?php
require_once __DIR__ . '/../../vendor/autoload.php';

class AmoCRMAuth
{
    private $clientId;
    private $clientSecret;
    private $redirectUri = 'http://localhost:8000/callback.php';
    private $tokenFile = 'token.json';
    private $serverPidFile = 'server.pid';
    private $configFile = 'config.json';
    private $isWindows;

    public function __construct()
    {
        $this->isWindows = strtoupper(substr(PHP_OS, 0, 3)) === 'WIN';    
    }

    public function startAuth()
    {
        echo "üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ AmoCRM...\n";
        echo "----------------------------------------\n";
        echo "Redirect URI: " . $this->redirectUri . "\n";
        echo "OS: " . ($this->isWindows ? 'Windows' : 'Unix') . "\n\n";

        if ($this->checkExistingToken()) {
            echo "‚úÖ –¢–æ–∫–µ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –≤–∞–ª–∏–¥–µ–Ω\n";
            $this->stopServer();
            return true;
        }

        if (!$this->startLocalServer()) {
            echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä\n";
            return false;
        }
        
        echo "‚è≥ –û–∂–∏–¥–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...\n";
        echo "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ Ctrl+C\n\n";
        
        return $this->waitForAuthorization();
    }

    private function waitForAuthorization()
    {
        $timeout = 300;
        $startTime = time();
        
        while (time() - $startTime < $timeout) {
            if ($this->checkExistingToken()) {
                echo "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n";
                $this->stopServer();
                return true;
            }
            
            sleep(2);
            
            if ((time() - $startTime) % 10 === 0) {
                $remaining = $timeout - (time() - $startTime);
                echo "‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ... (" . $remaining . " —Å–µ–∫. –æ—Å—Ç–∞–ª–æ—Å—å)\n";
            }
        }
        
        echo "‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ\n";
        $this->stopServer();
        return false;
    }

    private function checkExistingToken()
    {
        if (!file_exists($this->tokenFile)) {
            return false;
        }else{
            return true;
        }
    }

    private function startLocalServer()
    {
        if ($this->isServerRunning()) {
            echo "üì° –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω\n";
            return true;
        }

        echo "üñ•Ô∏è  –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä...\n";
        
        if ($this->isWindows) {
            // –ö–û–ú–ê–ù–î–ê –î–õ–Ø WINDOWS
            $command = 'php -S localhost:8000';
            pclose(popen($command, 'r'));
            
            // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
            sleep(3);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
            if ($this->isServerRunning()) {
                echo "‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω\n";
                return true;
            } else {
                echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n";
                echo "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –≤—Ä—É—á–Ω—É—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–∫–Ω–µ:\n";
                echo "   php -S localhost:8000\n\n";
                return false;
            }
        } else {
            // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è Unix
            $command = sprintf('php -S localhost:8000 -t "%s" > /dev/null 2>&1 & echo $!', __DIR__);
            $pid = shell_exec($command);
            
            if ($pid) {
                file_put_contents($this->serverPidFile, trim($pid));
                echo "‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω (PID: " . trim($pid) . ")\n";
                sleep(2);
                return true;
            }
        }
        
        return false;
    }

    private function isServerRunning()
    {
        try {
            $context = stream_context_create([
                'http' => [
                    'timeout' => 3,
                    'ignore_errors' => true
                ]
            ]);
            $response = @file_get_contents($this->redirectUri, false, $context);
            return $response !== false;
        } catch (Exception $e) {
            return false;
        }
    }

    public function stopServer()
    {
        if (!$this->isWindows) {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä —Ç–æ–ª—å–∫–æ –Ω–∞ Unix —Å–∏—Å—Ç–µ–º–∞—Ö
            if (file_exists($this->serverPidFile)) {
                $pid = trim(file_get_contents($this->serverPidFile));
                if ($pid) {
                    exec("kill $pid 2>/dev/null");
                }
                unlink($this->serverPidFile);
                echo "üõë –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n";
            }
        } else {
            echo "üí° –ù–∞ Windows —Å–µ—Ä–≤–µ—Ä –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é (Ctrl+C –≤ –æ–∫–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞)\n";
        }
        
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if (file_exists('auth_state.txt')) {
            unlink('auth_state.txt');
        }
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if (php_sapi_name() === 'cli') {
    $auth = new AmoCRMAuth();
    try {
        $auth->startAuth(); 
    } catch (Exception $e) {
        echo "\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: " . $e->getMessage() . "\n";
    }
} else {
    echo "‚ùå –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏\n";
}